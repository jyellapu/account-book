// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum StaffType {
  ADMIN
  EMPLOYEE
}

enum PaymentType {
  CASH
  UPI
}

enum AccountStatusType {
  OPEN
  CLOSED
}

model Staff {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  mobileNumber String        @unique
  password     String
  type         StaffType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  books        Book[]
  Transaction  Transaction[]
}

model Customer {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  mobileNumber String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  accounts     Account[]
  book         Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       Int
}

model Book {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  customers Customer[]
  staff     Staff[]
  expenses  Expense[]
}

model Account {
  id           Int               @id @default(autoincrement())
  amount       Float
  openedAt     DateTime
  dueDate      DateTime
  status       AccountStatusType @default(OPEN)
  paymentType  PaymentType
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  transactions Transaction[]
  customer     Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   Int
}

model Transaction {
  id               Int         @id @default(autoincrement())
  date             DateTime
  amount           Float
  paymentType      PaymentType
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  accountId        Int
  account          Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdByStaff   Staff?      @relation(fields: [createdByStaffId], references: [id])
  createdByStaffId Int?
}

model Expense {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
}
